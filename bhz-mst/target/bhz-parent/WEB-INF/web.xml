<?xml version="1.0" encoding="UTF-8"?>
<web-app xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns="http://java.sun.com/xml/ns/javaee" xmlns:jsp="http://java.sun.com/xml/ns/javaee/jsp" xmlns:web="http://java.sun.com/xml/ns/javaee/web-app_3_0.xsd" xsi:schemaLocation="http://java.sun.com/xml/ns/javaee http://java.sun.com/xml/ns/javaee/web-app_3_0.xsd" id="WebApp_ID" version="3.0">
  <display-name>bhz-mst</display-name>
  <welcome-file-list>
    <welcome-file>index.jsp</welcome-file>
  </welcome-file-list>
  <context-param>
    <param-name>webAppRootKey</param-name>
    <param-value>bhz-mst.root</param-value>
  </context-param>
  <context-param>
    <param-name>log4jConfigLocation</param-name>
    <param-value>/WEB-INF/classes/log4j.properties</param-value>
  </context-param>
  <context-param>
    <param-name>contextConfigLocation</param-name>
    <param-value>classpath*:spring-context.xml</param-value>
  </context-param>
 
  <listener>
    <listener-class>org.springframework.web.util.Log4jConfigListener</listener-class>
  </listener>
  <listener>
    <listener-class>org.springframework.web.context.ContextLoaderListener</listener-class>
  </listener>
  
	 <!-- 用于单点退出，该过滤器用于实现单点登出功能，可选配置-->
	<listener>		
		<listener-class>org.jasig.cas.client.session.SingleSignOutHttpSessionListener</listener-class>
	</listener> 
  <servlet>
    <servlet-name>bhz-mst</servlet-name>
    <servlet-class>org.springframework.web.servlet.DispatcherServlet</servlet-class>
    <init-param>
     	<param-name>contextConfigLocation</param-name>
     	<param-value>classpath:spring-mvc.xml</param-value>
   	</init-param>    
    <load-on-startup>1</load-on-startup>
  </servlet>
   <servlet-mapping>
      <servlet-name>bhz-mst</servlet-name>
      <url-pattern>/</url-pattern>
  </servlet-mapping>
 
  <filter>
      <filter-name>GzipFilter</filter-name>
      <filter-class>bhz.com.util.GzipFilter</filter-class>
      <init-param>
          <param-name>headers</param-name>
          <param-value>Content-Encoding=gzip</param-value>
      </init-param>
  </filter>
  <filter-mapping>
      <filter-name>GzipFilter</filter-name>
      <url-pattern>*.gzjs</url-pattern>
  </filter-mapping>
  <filter-mapping>
      <filter-name>GzipFilter</filter-name>
      <url-pattern>*.gzcss</url-pattern>
  </filter-mapping>
     
 <session-config>
   <session-timeout>15</session-timeout>
 </session-config>
  <!-- 分页过滤器 -->
 	<filter>
	    <filter-name>pageFilter</filter-name>
	    <filter-class>bhz.com.util.PageFilter</filter-class>
	</filter>
	<filter-mapping>
	    <filter-name>pageFilter</filter-name>
	    <url-pattern>*.page</url-pattern>
	</filter-mapping>
	
	<!-- 该过滤器用于实现单点登出功能，可选配置 -->
	<filter>
		<filter-name>CAS Single Sign Out Filter</filter-name>
		<filter-class>org.jasig.cas.client.session.SingleSignOutFilter</filter-class>
	</filter>
	<filter-mapping>
		<filter-name>CAS Single Sign Out Filter</filter-name>
		<url-pattern>/*</url-pattern>
	</filter-mapping>
	<!-- 登录的时候的验证过滤器 因为在第一次登录的时候，客户端没有携带浏览器的相关信息
		所以会先经过AuthenticationFilter过滤，然后跳转到cas登录地址 -->
	<filter>
		<filter-name>CAS Filter</filter-name>
		<filter-class>org.jasig.cas.client.authentication.AuthenticationFilter</filter-class>
		<init-param>
			<param-name>casServerLoginUrl</param-name>
			<param-value>https://cas.952100.com:8443/cas/login</param-value> 
			<!-- <param-value>http://slave1:8080/cas/login</param-value>  -->
		</init-param>
		<init-param>
			<param-name>serverName</param-name>
			<param-value>http://90.0.12.232:8080</param-value>
		</init-param>
		<init-param>
			<param-name>renew</param-name>
			<param-value>false</param-value>
		</init-param>
		<init-param>
			<param-name>gateway</param-name>
			<param-value>false</param-value>
		</init-param>
	</filter>
	<filter-mapping>
		<filter-name>CAS Filter</filter-name>
		<url-pattern>/*</url-pattern>
	</filter-mapping>
	<!-- 该过滤器负责对Ticket的校验工作，必须启用它
	  	客户端登录成功之后，会携带浏览器的cookie信息，经过Cas10TicketValidationFilter过滤器，检测Ticket-->
	<filter>
		<filter-name>CAS Validation Filter</filter-name>
		<filter-class>
			org.jasig.cas.client.validation.Cas10TicketValidationFilter</filter-class>
		<init-param>
			<param-name>casServerUrlPrefix</param-name>
			 <param-value>https://cas.952100.com:8443/cas</param-value> 
			<!-- <param-value>http://slave1:8080/cas</param-value>  -->
		</init-param>
		<init-param>
			<param-name>serverName</param-name>
			<param-value>http://90.0.12.232:8080</param-value>
		</init-param>
		<init-param>
			<param-name>redirectAfterValidation</param-name>
			<param-value>true</param-value>
		</init-param>
	</filter>
	<filter-mapping>
		<filter-name>CAS Validation Filter</filter-name>
		<url-pattern>/*</url-pattern>
	</filter-mapping>
	<!--
		该过滤器负责实现HttpServletRequest请求的包裹，比如允许开发者通过HttpServletRequest的getRemoteUser()
		方法获得SSO登录用户的登录名，可选配置。
	-->
	<filter>
		<filter-name>CAS HttpServletRequest Wrapper Filter</filter-name>
		<filter-class>org.jasig.cas.client.util.HttpServletRequestWrapperFilter</filter-class>
	</filter>
	<filter-mapping>
		<filter-name>CAS HttpServletRequest Wrapper Filter</filter-name>
		<url-pattern>/*</url-pattern>
	</filter-mapping>
	<!--
		该过滤器使得开发者可以通过org.jasig.cas.client.util.AssertionHolder来获取用户的登录名。
		比如AssertionHolder.getAssertion().getPrincipal().getName()。
	-->
	<filter>
		<filter-name>CAS Assertion Thread Local Filter</filter-name>
		<filter-class>org.jasig.cas.client.util.AssertionThreadLocalFilter</filter-class>
	</filter>
	<filter-mapping>
		<filter-name>CAS Assertion Thread Local Filter</filter-name>
		<url-pattern>/*</url-pattern>
	</filter-mapping>   
    <!-- <filter>
        <filter-name>authValidateFilter</filter-name>
        <filter-class>bhz.com.util.AuthValidateFilter</filter-class>
    </filter>
    <filter-mapping>
        <filter-name>authValidateFilter</filter-name>
        <servlet-name>bhz-mst</servlet-name>
    </filter-mapping> -->	
</web-app>