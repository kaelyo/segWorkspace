package com.gboss.controller;

import java.io.File;
import java.io.IOException;
import java.io.OutputStream;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.Iterator;
import java.util.List;
import java.util.Map;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import ldap.objectClasses.CommonCompany;
import ldap.oper.OpenLdap;
import ldap.oper.OpenLdapManager;

import org.apache.commons.beanutils.BeanUtils;
import org.apache.commons.io.FileUtils;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.stereotype.Controller;
import org.springframework.validation.BindingResult;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.multipart.MultipartFile;

import com.gboss.comm.SystemConfig;
import com.gboss.comm.SystemConst;
import com.gboss.comm.SystemException;
import com.gboss.pojo.Operatelog;
import com.gboss.pojo.Preload;
import com.gboss.pojo.PreloadBk;
import com.gboss.pojo.web.PreloadEntry;
import com.gboss.service.CustomerService;
import com.gboss.service.OperatelogService;
import com.gboss.service.PreloadService;
import com.gboss.util.DateUtil;
import com.gboss.util.JsonUtil;
import com.gboss.util.LogOperation;
import com.gboss.util.PageSelect;
import com.gboss.util.StringUtils;
import com.gboss.util.Utils;
import com.gboss.util.excel.CreateExcel_PDF_CSV;
import com.gboss.util.page.Page;

/**
 * @Package:com.gboss.controller
 * @ClassName:PreloadController
 * @Description:
 * @author:bzhang
 * @date:2014-10-9 下午3:29:24
 */
@Controller
public class PreloadController extends BaseController {

	protected static final Logger LOGGER = LoggerFactory
			.getLogger(PreloadController.class);

	@Autowired
	@Qualifier("preloadService")
	private PreloadService preloadService;

	@Autowired
	private SystemConfig systemconfig;

	@Autowired
	private CustomerService customerService; 
	
	@Autowired
	private OperatelogService operatelogService;

	@RequestMapping(value = "/preload/add")
	@LogOperation(description = "添加SIM卡", type = SystemConst.OPERATELOG_ADD,model_id=20100)
	public @ResponseBody
	HashMap<String, Object> add(@RequestBody Preload preload,
			BindingResult bindingResult, HttpServletRequest request) {
		HashMap<String, Object> resultMap = new HashMap<String, Object>();
		boolean flag = true;
		String msg = SystemConst.OP_SUCCESS;
		try {
			// 将参数添加到日志中
			request.setAttribute(SystemConst.OPLOG_PARAMS_KEY,
					JsonUtil.oToJ(preload, true));
			String compannyId = (String) request.getSession().getAttribute(
					SystemConst.ACCOUNT_COMPANYID);
			Long id = compannyId == null ? null : Long.valueOf(compannyId);
			String userId = (String) request.getSession().getAttribute(
					SystemConst.ACCOUNT_ID);
			if (StringUtils.isNotBlank(userId)) {
				preload.setOp_id(Long.valueOf(userId));
			}
			//新增SIM卡默认截止时间等于开始时间
			preload.setE_date(preload.getS_date());
			preload.setSubco_no(id);
			int result = preloadService.addSim(preload);
			if (result == 0) {
				preload.setCombo_id(1L);
				preloadService.save(preload);
			} else if (result == 1) {
				flag = false;
				msg = "呼号已存在！";
			} else if (result == 2) {
				flag = false;
				msg = "TBOX条码已存在！";
			} else if (result == 3) {
				flag = false;
				msg = "车架号已存在！";
			}else if (result == 4) {
				flag = false;
				msg = "IMEI/MEID已存在！";
			}

		} catch (Exception e) {
			LOGGER.error(e.getMessage(), e);
			flag = false;
			msg = SystemConst.OP_FAILURE;
			e.printStackTrace();
		}
		resultMap.put(SystemConst.SUCCESS, flag);
		resultMap.put(SystemConst.MSG, msg);
		return resultMap;
	}

	@RequestMapping(value = "/preload/modifyCard")
	@LogOperation(description = "补卡", type = SystemConst.OPERATELOG_UPDATE,model_id=200101)
	public @ResponseBody
	HashMap<String, Object> modifyCard(@RequestBody Preload preload,
			BindingResult bindingResult, HttpServletRequest request) {
		HashMap<String, Object> resultMap = new HashMap<String, Object>();
		boolean flag = true;
		String msg = SystemConst.OP_SUCCESS;
		try {
			// 将参数添加到日志中
			request.setAttribute(SystemConst.OPLOG_PARAMS_KEY,
					JsonUtil.oToJ(preload, true));
			int result = preloadService.addSim(preload);
			if (result == 1) {
				flag = false;
				msg = "呼号已存在！";
			} else if (result == 2) {
				flag = false;
				msg = "TBOX条码已存在！";
			} else if (result == 3) {
				flag = false;
				msg = "车架号已存在！";
			}else if (result == 4) {
				flag = false;
				msg = "IMEI/MEID已存在！";
			} else if (result == 0) {
				Preload sm = preloadService.get(Preload.class,
						preload.getSim_id());
				PreloadBk bk = new PreloadBk();
			    BeanUtils.copyProperties(bk,sm);
			    //保存到历史表
			    preloadService.save(bk);
				if (sm != null) {
					sm.setAkey(preload.getAkey());
					sm.setTelco(preload.getTelco());
					sm.setW_user(preload.getW_user());
					sm.setW_password(preload.getW_password());
					sm.setEsn(preload.getEsn());
					sm.setIccid(preload.getIccid());
					sm.setImsi(preload.getImsi());
					sm.setCall_letter(preload.getCall_letter());
					sm.setImei(preload.getImei());
					sm.setS_date(preload.getS_date());
					sm.setRemark(preload.getRemark());
					preloadService.update(sm);
				}
			}
		} catch (Exception e) {
			LOGGER.error(e.getMessage(), e);
			flag = false;
			msg = SystemConst.OP_FAILURE;
			e.printStackTrace();
		}
		resultMap.put(SystemConst.SUCCESS, flag);
		resultMap.put(SystemConst.MSG, msg);
		return resultMap;
	}
	
	@RequestMapping(value = "/preload/update")
//	@LogOperation(description = "修改SIM卡", type = SystemConst.OPERATELOG_UPDATE,model_id=200101)
	public @ResponseBody
	HashMap<String, Object> update(@RequestBody PreloadEntry preloadEntry,
			BindingResult bindingResult, HttpServletRequest request) {
		HashMap<String, Object> resultMap = new HashMap<String, Object>();
		boolean flag = true;
		String msg = SystemConst.OP_SUCCESS;
		try {
			String userId = (String) request.getSession().getAttribute(SystemConst.ACCOUNT_ID);
			String username = (String) request.getSession().getAttribute(SystemConst.ACCOUNT_USERNAME);
			String companyid = (String) request.getSession().getAttribute(SystemConst.ACCOUNT_COMPANYID);
			String upMsg = preloadEntry.getUpMsg();
			Preload preload = preloadEntry.getPreload();
			// 将参数添加到日志中
			request.setAttribute(SystemConst.OPLOG_PARAMS_KEY,
					JsonUtil.oToJ(preload, true));
			int result = preloadService.addSim(preload);
			if (result == 1) {
				flag = false;
				msg = "呼号已存在！";
			} else if (result == 2) {
				flag = false;
				msg = "TBOX条码已存在！";
			} else if (result == 3) {
				flag = false;
				msg = "车架号已存在！";
			}else if (result == 4) {
				flag = false;
				msg = "IMEI/MEID已存在！";
			} else if (result == 0) {
				Preload sm = preloadService.get(Preload.class,
						preload.getSim_id());
				PreloadBk bk = new PreloadBk();
			    BeanUtils.copyProperties(bk,sm);
			    //保存到历史表
			    preloadService.save(bk);
				if (sm != null) {
					sm.setAkey(preload.getAkey());
					sm.setTelco(preload.getTelco());
					sm.setW_user(preload.getW_user());
					sm.setW_password(preload.getW_password());
					sm.setEsn(preload.getEsn());
					sm.setIccid(preload.getIccid());
					sm.setImsi(preload.getImsi());
					sm.setCall_letter(preload.getCall_letter());
					sm.setImei(preload.getImei());
					sm.setS_date(preload.getS_date());
					//默认缴费开始时间等于结束时间
					sm.setE_date(preload.getS_date());
					// 终端
					sm.setBarcode(preload.getBarcode());
					sm.setUnittype_id(preload.getUnittype_id());
					// 车辆
					sm.setVin(preload.getVin());
					sm.setEngine_no(preload.getEngine_no());
					sm.setColor(preload.getColor());
					sm.setProduction_date(preload.getProduction_date());
					sm.setRemark(preload.getRemark());
					preloadService.update(sm);					
				}
			}
			Operatelog log = new Operatelog();
			log.setUser_id(Long.valueOf(userId));
			log.setUser_name(username);
			log.setModel_id(200101);
			log.setOp_type(Integer.valueOf(SystemConst.OPERATELOG_UPDATE));
			log.setSubco_no(Long.valueOf(companyid));
			upMsg = "操作ip地址:" + Utils.getIpAddr(request) + ";" +upMsg;
			log.setRemark(upMsg);
			operatelogService.add(log);
		} catch (Exception e) {
			LOGGER.error(e.getMessage(), e);
			flag = false;
			msg = SystemConst.OP_FAILURE;
			e.printStackTrace();
		}
		resultMap.put(SystemConst.SUCCESS, flag);
		resultMap.put(SystemConst.MSG, msg);
		return resultMap;
	}

	@RequestMapping(value = "/preload/findPreloadByPage")
	public @ResponseBody
	Page<HashMap<String, Object>> findPreloadByPage(
			@RequestBody PageSelect<Map<String, Object>> pageSelect,
			HttpServletRequest request) throws SystemException {
		if (LOGGER.isDebugEnabled()) {
			LOGGER.debug("分页查询SIM卡开始");
		}
		Page<HashMap<String, Object>> result = null;
		try {
			String compannyId = (String) request.getSession().getAttribute(
					SystemConst.ACCOUNT_COMPANYID);
			Long id = compannyId == null ? null : Long.valueOf(compannyId);
			if (pageSelect != null) {
				Map map = pageSelect.getFilter();
				if (map == null) {
					map = new HashMap<String, Object>();
				}
				pageSelect.setFilter(map);
			}
			result = preloadService.findSimByPage(id, pageSelect);
		} catch (Exception e) {
			LOGGER.error(e.getMessage(), e);
			// 打印
			e.printStackTrace();
			// 同时把异常抛到前台
			throw new SystemException();
		}
		if (LOGGER.isDebugEnabled()) {
			LOGGER.debug("分页查询SIM卡结束");
		}
		return result;
	}

	@RequestMapping(value = "/preload/operate")
	@LogOperation(description = "SIM卡状态更改", type = SystemConst.OPERATELOG_UPDATE,model_id=200101)
	public @ResponseBody
	HashMap<String, Object> operate(
			@RequestParam(value = "ids[]", required = false) List<Long> ids,
			Integer type, HttpServletRequest request) throws SystemException {
		if (LOGGER.isDebugEnabled()) {
			LOGGER.debug("SIM卡状态更改卡开始");
		}
		HashMap<String, Object> resultMap = new HashMap<String, Object>();
		boolean flag = true;
		String msg = SystemConst.OP_SUCCESS;
		try {
			int result = preloadService.operate(ids, type);
			if (result == -1) {
				flag = false;
				msg = "操作对象为空";
			}

		} catch (Exception e) {
			LOGGER.error(e.getMessage(), e);
			flag = false;
			msg = SystemConst.OP_FAILURE;
			e.printStackTrace();
		}
		resultMap.put(SystemConst.SUCCESS, flag);
		resultMap.put(SystemConst.MSG, msg);
		if (LOGGER.isDebugEnabled()) {
			LOGGER.debug("SIM卡状态更改结束");
		}
		return resultMap;
	}
	
	@RequestMapping(value = "/preload/operateCombo")
	@LogOperation(description = "SIM卡套餐状态更改", type = SystemConst.OPERATELOG_UPDATE,model_id=200101)
	public @ResponseBody
	HashMap<String, Object> operateCombo(
			@RequestParam(value = "ids[]", required = false) List<Long> ids,
			Integer type, HttpServletRequest request) throws SystemException {
		if (LOGGER.isDebugEnabled()) {
			LOGGER.debug("SIM卡状态更改卡开始");
		}
		HashMap<String, Object> resultMap = new HashMap<String, Object>();
		boolean flag = true;
		String msg = SystemConst.OP_SUCCESS;
		try {
			int result = preloadService.operateCombo(ids, type);
			if (result == -1) {
				flag = false;
				msg = "操作对象为空";
			}

		} catch (Exception e) {
			LOGGER.error(e.getMessage(), e);
			flag = false;
			msg = SystemConst.OP_FAILURE;
			e.printStackTrace();
		}
		resultMap.put(SystemConst.SUCCESS, flag);
		resultMap.put(SystemConst.MSG, msg);
		if (LOGGER.isDebugEnabled()) {
			LOGGER.debug("SIM卡状态更改结束");
		}
		return resultMap;
	}

	/**
	 * 车辆信息excel上传处理
	 * 
	 * @param paytxtFiles
	 * @param vehicle
	 * @param bindResult
	 * @param request
	 * @return
	 * @throws SystemException
	 */
	@RequestMapping(value = "/preload/importSim")
	@LogOperation(description = "sim卡资料导入", type = SystemConst.OPERATELOG_ADD, model_id =20100)
	public void importSim(@RequestParam("sim_file") MultipartFile sim_file,
			@RequestParam(required = false) Boolean isOverride,Integer type, Integer telco,
			HttpServletRequest request, HttpServletResponse response)
			throws SystemException, IOException {
		String compId = (String) request.getSession().getAttribute(
				SystemConst.ACCOUNT_COMPANYID);
		Long compannyId = compId == null ? null : Long.valueOf(compId);
		String uid = (String) request.getSession().getAttribute(
				SystemConst.ACCOUNT_ID);
		Long userId = Long.valueOf(uid);
		String compCode = (String) request.getSession().getAttribute(
				SystemConst.ACCOUNT_COMPANYCODE);
		String compName = (String) request.getSession().getAttribute(
				SystemConst.ACCOUNT_COMPANYNAME);
		Map<String, Object> map = new HashMap<String, Object>();
		long size = sim_file.getSize();
		if (size > 10000000) {
			map.put("success", false);
			map.put("msg", "上传文件不能超过10M");
		} else {
			// excel上传保存路径
			String path = systemconfig.getExcelUploadPath();
			File fileDir = new File(path);
			if (!fileDir.exists()) { // 判断路径是否存在，不存在则创建
				fileDir.mkdirs();
			}
			// 保存文件和数据
			File descFile = new File(fileDir, sim_file.getOriginalFilename());
			FileUtils.copyInputStreamToFile(sim_file.getInputStream(), descFile);
			List<String[]> dataList = CreateExcel_PDF_CSV.getData(descFile);
			
			// 解析并保存用户数据   compannyId  用户类型  70792
			map = preloadService.importSim(dataList, compannyId, userId, type, telco);
			/*boolean remark = CreateExcel_PDF_CSV.checkExcel(descFile, type);
			if(remark){
				List<String[]> dataList = CreateExcel_PDF_CSV.getData(descFile);
				// 解析并保存用户数据
				map = preloadService.importSim(dataList, compannyId, userId, type, telco);
			}else{
				map.put("success", false);
				map.put("msg", "请导入相应格式的excel文件！");
			}*/
			OutputStream out = response.getOutputStream();
			String str = "<script>parent.callback('" + map.get("msg") + "',"
					+ map.get("success") + ");</script>";
			out.write(str.getBytes("utf-8"));
			out.flush();
			out.close();
			// 删除上传文件
			descFile.delete();
		}
	}
	
	/**
	 * 车辆信息excel上传处理
	 * 
	 * @param paytxtFiles
	 * @param vehicle
	 * @param bindResult
	 * @param request
	 * @return
	 * @throws SystemException
	 */
	@RequestMapping(value = "/preload/importUbiSim")
	@LogOperation(description = "UBI资料导入", type = SystemConst.OPERATELOG_ADD, model_id =20100)
	public void importUbiSim(@RequestParam("ubi_file") MultipartFile ubi_file,
		@RequestParam(required = false) Boolean isOverride,Integer type, Integer telco,
		HttpServletRequest request, HttpServletResponse response)
			throws SystemException, IOException {
		String compId = (String) request.getSession().getAttribute(
			SystemConst.ACCOUNT_COMPANYID);
		Long compannyId = compId == null ? null : Long.valueOf(compId);
		String uid = (String) request.getSession().getAttribute(
			SystemConst.ACCOUNT_ID);
		Long userId = Long.valueOf(uid);
		String compCode = (String) request.getSession().getAttribute(
			SystemConst.ACCOUNT_COMPANYCODE);
		String compName = (String) request.getSession().getAttribute(
			SystemConst.ACCOUNT_COMPANYNAME);
		Map<String, Object> map = new HashMap<String, Object>();
		long size = ubi_file.getSize();
		if (size > 10000000) {
			map.put("success", false);
			map.put("msg", "上传文件不能超过10M");
		} else {
			// excel上传保存路径
			String path = systemconfig.getExcelUploadPath();
			File fileDir = new File(path);
			if (!fileDir.exists()) { // 判断路径是否存在，不存在则创建
				fileDir.mkdirs();
			}
			// 保存文件和数据
			File descFile = new File(fileDir, ubi_file.getOriginalFilename());
			FileUtils.copyInputStreamToFile(ubi_file.getInputStream(), descFile);
			List<String[]> dataList = CreateExcel_PDF_CSV.getData(descFile,2);//
//			
//			for(String[] colsv: dataList){
//				System.out.println(colsv[0]+",," + colsv[1]);
//			}
			
			
			// 解析并保存用户数据
			map = preloadService.importUBI(dataList, compannyId, userId, type, telco);
			/*boolean remark = CreateExcel_PDF_CSV.checkExcel(descFile, type);
			if(remark){
				List<String[]> dataList = CreateExcel_PDF_CSV.getData(descFile);
				// 解析并保存用户数据
				map = preloadService.importSim(dataList, compannyId, userId, type, telco);
			}else{
				map.put("success", false);
				map.put("msg", "请导入相应格式的excel文件！");
			}*/
			OutputStream out = response.getOutputStream();
			String str = "<script>parent.callback('" + map.get("msg") + "'," + map.get("success") + ");</script>";
			out.write(str.getBytes("utf-8"));
			out.flush();
			out.close();
			// 删除上传文件
			descFile.delete();
		}
	}
	

	@RequestMapping(value = "/preload/updateCombo", method = RequestMethod.POST)
	public @ResponseBody Map<String, Object> updateCombo(@RequestBody Preload preload, BindingResult bindingResult,HttpServletRequest request) throws Exception {
		Map<String, Object> map = new HashMap<String, Object>();
		Preload sim = preloadService.get(Preload.class, preload.getSim_id());
		boolean flag = true;
		String msg =  SystemConst.OP_SUCCESS;
		if(sim != null){
			PreloadBk bk = new PreloadBk();
		    BeanUtils.copyProperties(bk,sim);
		    //保存到历史表
		    preloadService.save(bk);
			//变更套餐
			//sim.setNew_combo_id(preload.getCombo_id());
			sim.setCombo_id(preload.getCombo_id());
			sim.setCombo_status(SystemConst.SIM_COMBO_UNNORMAL);
			preloadService.update(sim);
		}else{
			flag = false;
			msg = SystemConst.OP_FAILURE;
		}
		map.put("success", flag);
		map.put("msg", msg);
		return map;
	}
	
	
	

	@RequestMapping(value = "/preload/exportExcelSim")
	@LogOperation(description = "SIM卡导出", type = SystemConst.OPERATELOG_SEARCHKEY, model_id =20061)
	public @ResponseBody
	void exportUpgrade(
			HttpServletRequest request, HttpServletResponse response)
			throws SystemException {
		try {
			Map returnMap =   request.getParameterMap();
			//将request.getParameterMap()转换成可操作的普通Map
			// 返回值Map
		    Map map = new HashMap();
		    Iterator entries =returnMap.entrySet().iterator();
		    Map.Entry entry = null;
		    String name = "";
		    String value = "";
		    while (entries.hasNext()) {
		        entry = (Map.Entry) entries.next();
		        name = (String) entry.getKey();
		        Object valueObj = entry.getValue();
		        if(null == valueObj){
		            value = "";
		        }else if(valueObj instanceof String[]){
		            String[] values = (String[])valueObj;
		            for(int i=0;i<values.length;i++){
		                value = values[i] + ",";
		            }
		            value = value.substring(0, value.length()-1);
		        }else{
		            value = valueObj.toString();
		        }
		        if("null".equals(value)){
		        	value="";
		        }
		        if(StringUtils.isNotBlank(name) && StringUtils.isNotBlank(value)){
		        	map.put(name, value);
		        }
		    }
			String compannyId = (String) request.getSession().getAttribute(
					SystemConst.ACCOUNT_COMPANYID);
			Long id = compannyId == null ? null : Long.valueOf(compannyId);
		    
			String[][] title = {{"序号","10"},{"ICCID","20"},{"IMSI","20"},{"AKEY","20"},{"ESN","20"},
					{"EVDO账号","30"},{"EVDO密码","20"},{"呼号","20"},{"开通日期","20"},{"开通套餐","20"},{"TBOX条码","20"},{"IMEI/MEID","20"},
					{"运营商","15"},{"车架号","30"},{"车辆颜色","10"},{"是否入网","10"},{"SIM卡状态","10"},
					{"套餐状态","10"},{"发动机号","20"},{"操作时间","35"},{"备注","30"},{"扫描时间","20"}
					/*{"序号","10"},{"呼号","20"},{"IMEI/MEID","30"},
					{"运营商","15"},{"TBOX条码","30"},{"车架号","30"},{"车辆颜色","10"},{"是否入网","10"},{"SIM卡状态","10"},
					{"套餐状态","10"},{"缴费时间","20"},{"操作时间","35"},{"备注","30"}*/};
			
			List<HashMap<String, Object>> list = preloadService.findSimList(id, map);
			List valueList = new ArrayList();
			HashMap<String, Object> upgrade = null;
			String[] values = null;
			int listLenth=list.size();
			for(int i=0; i<listLenth; i++){
				values = new String[title.length];
				upgrade = list.get(i);
				values[0] = String.valueOf(i+1);
				values[1] = upgrade.get("iccid")==null?"":upgrade.get("iccid").toString();
				values[2] = upgrade.get("imsi")==null?"":upgrade.get("imsi").toString();
				values[3] = upgrade.get("akey")==null?"":upgrade.get("akey").toString();
				values[4] = upgrade.get("esn")==null?"":upgrade.get("esn").toString();
				values[5] = upgrade.get("w_user")==null?"":upgrade.get("w_user").toString();
				values[6] = upgrade.get("w_password")==null?"":upgrade.get("w_password").toString();				
				values[7] = upgrade.get("call_letter")==null ?"":upgrade.get("call_letter").toString();
				values[8] = upgrade.get("s_date")==null ?"":upgrade.get("s_date").toString();
				values[9] = upgrade.get("name")==null ?"":upgrade.get("name").toString();
				values[10] = upgrade.get("barcode")==null ?"":upgrade.get("barcode").toString();
				values[11] = upgrade.get("imei")==null ?"":upgrade.get("imei").toString();
				
				Integer telco =  upgrade.get("telco")==null ?null:Integer.valueOf(upgrade.get("telco").toString());
				if(telco != null && telco ==1){
					values[12] = "移动";
				}else if(telco != null && telco ==2){
					values[12] = "联通";
				}else if(telco != null && telco ==3){
					values[12] = "电信";
				}else{
					values[12] = "";
				}
				
				values[13] = upgrade.get("vin")==null ?"":upgrade.get("vin").toString();
				values[14] = upgrade.get("color")==null ?"":upgrade.get("color").toString();
				values[15] = "否";
				if(StringUtils.isNotNullOrEmpty(upgrade.get("unit_id"))){
					values[15] = "是";
				}
				Integer falg = upgrade.get("flag")==null ?null:Integer.valueOf(upgrade.get("flag").toString());  
				 values[16] = "";
				 if(falg != null && falg==0){
					 values[16] = "未激活";
	                }else if(falg != null && falg==1){
	                	values[16] = "激活";
	                }else if(falg != null && falg ==2){
	                	values[16] = "停机";
	                }else if(falg != null && falg ==3){
	                	values[16] = "销号";
	                }else if(falg != null && falg ==9){
	                	values[16] = "删除";
	                }
				 
				 Integer combo_status = upgrade.get("combo_status")==null ?null:Integer.valueOf(upgrade.get("combo_status").toString()); 
				 values[17] ="";
				 if(combo_status !=null && combo_status==0){
					 values[17] = "未生效";
 	                }else if(combo_status !=null &&  combo_status==1){
 	                	values[17] = "生效";
 	                }else if(combo_status !=null && combo_status ==2){
 	                	values[17] = "变更申请";
 	                }else if(combo_status !=null && combo_status ==3){
 	                	values[17] = "变更失败";
 	                }else if(combo_status !=null && combo_status ==9){
 	                	values[17] = "删除";
 	                }
				 
				 values[18] = upgrade.get("engine_no")==null ?"":upgrade.get("engine_no").toString();
				 values[19] = upgrade.get("stamp")==null ?"":upgrade.get("stamp").toString();
				 values[20] = upgrade.get("remark")==null ?"":upgrade.get("remark").toString();
				 values[21] = upgrade.get("scan_time")==null ?"":upgrade.get("scan_time").toString();

				valueList.add(values);
			}
			//获得分公司中英文名称
			OpenLdap openLdap = OpenLdapManager.getInstance();
			CommonCompany commonCompany =  openLdap.getCompanyById(compannyId);
			CreateExcel_PDF_CSV.createExcel(valueList, response, "SIM卡汇总", title,commonCompany.getCnfullname(),commonCompany.getEnfullname(),false);
		} catch (Exception e) {
			LOGGER.error(e.getMessage(), e);
			// 打印
			e.printStackTrace();
			// 同时把异常抛到前台
			throw new SystemException();
		}
	}
	
	

	@RequestMapping(value = "/preload/getSimMsg")
	public @ResponseBody HashMap<String, Object> getComboMsg(Long sim_id, HttpServletRequest request) throws SystemException {
		HashMap<String, Object> results = new HashMap<String, Object>();
		try {
			Preload sim = preloadService.get(Preload.class, sim_id);
			results.put("s_date", DateUtil.format(sim.getS_date(), DateUtil.YMD_DASH));
			results.put("e_date",DateUtil.format(sim.getE_date(), DateUtil.YMD_DASH));
		} catch (Exception e) {
			// 同时把异常抛到前台
			throw new SystemException();
		}
		return results;
	}

	/**
	 * ubi客户车辆资料导入
	 * @param cv_file
	 * @param request
	 * @param response
	 * @throws SystemException
	 * @throws IOException
	 */
	@RequestMapping("/preload/importCVFile")
	@LogOperation(description = "ubi客户车辆资料导入", type = SystemConst.OPERATELOG_ADD, model_id =20100)
	public @ResponseBody Map<String, Object> importCustomerVehicle(@RequestParam("cv_file") MultipartFile cv_file, HttpServletRequest request, 
			HttpServletResponse response) throws SystemException, IOException {
		String compId = (String) request.getSession().getAttribute(SystemConst.ACCOUNT_COMPANYID);
		Long compannyId = compId == null ? null : Long.valueOf(compId);
		String uid = (String) request.getSession().getAttribute(SystemConst.ACCOUNT_ID);
		String companyCode = (String) request.getSession().getAttribute(SystemConst.ACCOUNT_COMPANYCODE);
		String companyName = (String) request.getSession().getAttribute(SystemConst.ACCOUNT_COMPANYNAME);
		Long userId = Long.valueOf(uid);
		long size = cv_file.getSize();
		Map<String, Object> map = new HashMap<String, Object>();
		if (size > 10000000) {
			map.put("success", false);
			map.put("msg", "上传文件不能超过10M");
		} else {
			// excel上传保存路径
			String path = systemconfig.getExcelUploadPath();
			File fileDir = new File(path);
			if (!fileDir.exists()) { // 判断路径是否存在，不存在则创建
				fileDir.mkdirs();
			}
			// 保存文件和数据
			File descFile = new File(fileDir, cv_file.getOriginalFilename());
			FileUtils.copyInputStreamToFile(cv_file.getInputStream(), descFile);
			List<String[]> dataList = CreateExcel_PDF_CSV.getData(descFile, 11);
			map = customerService.importCustomerVehicle(dataList, compannyId, userId, companyName, companyCode);
			// 删除上传文件
			descFile.delete();
		}
		return map;
	}
	
	/**
	 * ubi资料导入查询
	 * @param pageSelect
	 * @param request
	 * @return
	 * @throws SystemException
	 */
	@RequestMapping(value = "/preload/findUbiByPage", method = RequestMethod.POST)
	public @ResponseBody Page<Map<String, Object>> findUbiByPage(@RequestBody PageSelect<Map<String, Object>> pageSelect,
			HttpServletRequest request) throws SystemException {
		Page<Map<String, Object>> result = null;
		try{
			String compannyId = (String) request.getSession().getAttribute(SystemConst.ACCOUNT_COMPANYID);
			if (pageSelect != null) {
				Map<String, Object> map = pageSelect.getFilter();
				if (map == null) {
					map = new HashMap<String, Object>();
				}
				map.put("subco_no", compannyId);
				pageSelect.setFilter(map);
			}
			result = preloadService.findUbiByPage(pageSelect);
		}catch(Exception e){
			LOGGER.info("查询ubi资料导入错误，原因:"+e.getMessage());
		}
		return result;
	}
	
	/**
	 * SIM卡资料校验
	 * @param sim_files
	 * @param request
	 * @param response
	 * @return
	 * @throws SystemException
	 * @throws IOException
	 */
	@RequestMapping(value = "/preload/verifySim")
//	@LogOperation(description = "sim卡资料校验", type = SystemConst.OPERATELOG_ADD, model_id =20100)
	public @ResponseBody Map<String, Object> verifySim(@RequestParam("sim_file") List<MultipartFile> sim_files,
			HttpServletRequest request, HttpServletResponse response)
			throws SystemException, IOException {
		//先清除缓存数据
		request.getSession().removeAttribute("SIMVERIFY_LIST");
		String compId = (String) request.getSession().getAttribute(SystemConst.ACCOUNT_COMPANYID);
		Long compannyId = compId == null ? null : Long.valueOf(compId);
		String uid = (String) request.getSession().getAttribute(SystemConst.ACCOUNT_ID);
		Long userId = Long.valueOf(uid);
		String compCode = (String) request.getSession().getAttribute(SystemConst.ACCOUNT_COMPANYCODE);
		String compName = (String) request.getSession().getAttribute(SystemConst.ACCOUNT_COMPANYNAME);
		Map<String, Object> map = new HashMap<String, Object>();
		boolean flag = true;
		String msg = "";
		for(MultipartFile sim_file : sim_files){
			long size = sim_file.getSize();
			if (size > 10000000) {
				flag = false;
				msg = "上传文件不能超过10M";
			}
		}
		if(!flag){
			
		}else{
			// excel上传保存路径
			String path = systemconfig.getExcelUploadPath();
			File fileDir = new File(path);
			if (!fileDir.exists()) { // 判断路径是否存在，不存在则创建
				fileDir.mkdirs();
			}
			List<String[]> dataList = new ArrayList<String[]>();
			for(MultipartFile sim_file : sim_files){
				// 保存文件和数据
				File descFile = new File(fileDir, sim_file.getOriginalFilename());
				FileUtils.copyInputStreamToFile(sim_file.getInputStream(), descFile);
				
				dataList.addAll(CreateExcel_PDF_CSV.getData(descFile, 9));	//读取每一行9列
				descFile.delete();	//文件读取完后删除
			}
			if(!dataList.isEmpty()){
				// 解析并保存用户数据
				map = preloadService.verifySim(dataList, compannyId, userId);
			}
		}
		List<Map<String, Object>> dataList = map.get("compareList") == null ? 
				new ArrayList<Map<String,Object>>() : (List<Map<String, Object>>)map.get("compareList");
		request.getSession().setAttribute("SIMVERIFY_LIST", dataList);
		return map;
	}
	
	/**
	 * SIM卡校验结果查询
	 * @param request
	 * @param response
	 * @return
	 * @throws SystemException
	 */
	@RequestMapping(value = "/preload/listVerifySimResult", method = RequestMethod.POST)
	public @ResponseBody List<Map<String, Object>> listVerifySimResult(HttpServletRequest request, HttpServletResponse response)throws SystemException{
		Object obj = request.getSession().getAttribute("SIMVERIFY_LIST");
		List<Map<String, Object>> dataList = obj == null?
				new ArrayList<Map<String,Object>>() : (List<Map<String, Object>>)obj;
		return dataList;
	}
	
	/**
	 * SIM卡校验结果下载
	 * @param request
	 * @param response
	 * @throws SystemException
	 */
	@RequestMapping("/preload/downSimVerify")
	public @ResponseBody void downVerifySimList(HttpServletRequest request, HttpServletResponse response)throws SystemException{
		String compannyId = (String) request.getSession().getAttribute(SystemConst.ACCOUNT_COMPANYID);
		Long id = compannyId == null ? null : Long.valueOf(compannyId);
	    
		String[][] title = {{"序号","10"},{"ICCID","20"},{"IMSI","20"},{"AKEY","20"},{"ESN","20"}
					, {"EVDO账号", "20"}, {"EVDO密码", "20"}, {"设备号", "20"}, {"序列号（机身条码）", "20"}
					, {"MEID(3G模块)", "20"}, {"比对结果", "20"}};
		try{
			Object obj = request.getSession().getAttribute("SIMVERIFY_LIST");
			List<Map<String, Object>> list = obj == null?
					new ArrayList<Map<String,Object>>() : (List<Map<String, Object>>)obj;
			List valueList = new ArrayList();
			Map<String, Object> upgrade = null;
			String[] values = null;
			int listLenth=list.size();
			
			for(int i=0; i<listLenth; i++){
				values = new String[title.length];
				upgrade = list.get(i);
				values[0] = String.valueOf(i+1);
				values[1] = upgrade.get("iccid")==null?"":upgrade.get("iccid").toString();
				values[2] = upgrade.get("imsi")==null?"":upgrade.get("imsi").toString();
				values[3] = upgrade.get("akey")==null?"":upgrade.get("akey").toString();
				values[4] = upgrade.get("esn")==null?"":upgrade.get("esn").toString();
				values[5] = upgrade.get("w_user")==null?"":upgrade.get("w_user").toString();
				values[6] = upgrade.get("w_password")==null?"":upgrade.get("w_password").toString();
				values[7] = upgrade.get("call_letter")==null?"":upgrade.get("call_letter").toString();
				values[8] = upgrade.get("barcode")==null?"":upgrade.get("barcode").toString();
				values[9] = upgrade.get("imei")==null?"":upgrade.get("imei").toString();
				values[10] = upgrade.get("result")==null?"":upgrade.get("result").toString();
				valueList.add(values);
			}
			//获得分公司中英文名称
			OpenLdap openLdap = OpenLdapManager.getInstance();
			CommonCompany commonCompany =  openLdap.getCompanyById(compannyId);
			CreateExcel_PDF_CSV.createExcel(valueList, response, "SIM卡校验", title, commonCompany.getCnfullname(), commonCompany.getEnfullname(), false);
		}catch(Exception e){
			LOGGER.error(e.getMessage(), e);
			e.printStackTrace();
			// 同时把异常抛到前台
			throw new SystemException();
		}
		request.getSession().removeAttribute("SIMVERIFY_LIST");
	}
}
