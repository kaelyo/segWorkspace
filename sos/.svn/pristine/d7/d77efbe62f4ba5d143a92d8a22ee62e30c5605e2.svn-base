package com.gboss.controller;

import java.util.ArrayList;
import java.util.List;
import java.util.Map;

import javax.servlet.http.HttpServletRequest;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.ResponseBody;

import com.gboss.comm.SystemConst;
import com.gboss.comm.SystemException;
import com.gboss.pojo.Backup;
import com.gboss.pojo.Collectionbk;
import com.gboss.pojo.Customerbk;
import com.gboss.pojo.FeeInfobk;
import com.gboss.pojo.Unit;
import com.gboss.pojo.Unitbk;
import com.gboss.pojo.Vehiclebk;
import com.gboss.pojo.web.CustInfo;
import com.gboss.pojo.web.Oldview;
import com.gboss.service.BackupService;
import com.gboss.service.ModelService;
import com.gboss.service.UnitTypeService;
import com.gboss.util.PageSelect;
import com.gboss.util.StringUtils;
import com.gboss.util.page.Page;

/**
 * @Package:com.gboss.controller
 * @ClassName:BackupController
 * @Description:TODO
 * @author:xiaoke
 * @date:2014-7-11 下午3:28:35
 */
@Controller
public class BackupController extends BaseController {
	
	@Autowired
	@Qualifier("BackupService")
	private BackupService backupService;
	
	@Autowired
	private ModelService modelService;
	
	@Autowired
	private UnitTypeService unitTypeService;
	
	@RequestMapping(value = "/backup/findBackup", method = RequestMethod.POST)
	public @ResponseBody Page<Backup> findBackup(@RequestBody PageSelect<Backup> pageSelect,
			HttpServletRequest request) throws SystemException {
		CustInfo custInfo = (CustInfo) request.getSession().getAttribute(SystemConst.CUST_INFO);
		Unit unit = custInfo.getUnit();
		Map filter = pageSelect.getFilter();
		filter.put("unit_id", unit.getUnit_id());
		pageSelect.setFilter(filter);
		pageSelect.setOrder("stamp");
		pageSelect.setIs_desc(true);
		Page<Backup> result = backupService.findBackup(pageSelect);
		return result;
	}
	
	@RequestMapping(value = "/backup/findStopAndOpen", method = RequestMethod.POST)
	public @ResponseBody Page<Backup> findStopAndOpen(@RequestBody PageSelect<Backup> pageSelect,
			HttpServletRequest request) throws SystemException {
		CustInfo custInfo = (CustInfo) request.getSession().getAttribute(SystemConst.CUST_INFO);
		Unit unit = custInfo.getUnit();
		Map filter = pageSelect.getFilter();
		filter.put("unit_id", unit.getUnit_id());
		pageSelect.setFilter(filter);
		pageSelect.setOrder("stamp");
		pageSelect.setIs_desc(true);
		Page<Backup> result = backupService.findStopAndOpen(pageSelect);
		return result;
	}
	
	@RequestMapping(value = "/backup/getOldview", method = RequestMethod.POST)
	public @ResponseBody Oldview getOldview(@RequestBody Backup backup,
			HttpServletRequest request) throws SystemException {
		Oldview result = new Oldview();
		backup = backupService.getBackupByid(backup.getBk_id());
		Customerbk customer = backupService.getCustomerbkbyid(backup.getBkc_id());
		Vehiclebk vehicle = backupService.getVehiclebkbyid(backup.getBkv_id());
		Unitbk unit = backupService.getUnitbkbyid(backup.getBku_id());
		Collectionbk collection = backupService.getCollectionbkbyid(backup.getBkfc_id());
		List<FeeInfobk> list = new ArrayList<FeeInfobk>();
		String bkf_ids = backup.getBkf_ids();
		if(StringUtils.isNotBlank(bkf_ids)){
			String[] ids = bkf_ids.split(",");
			for(int i=0;i<ids.length;i++){
				if(StringUtils.isNotBlank(ids[i])){
					Long id = Long.valueOf(ids[i]);
					FeeInfobk feeInfo = backupService.getFeeInfobkbyid(id);
					list.add(feeInfo);
				}
			}
		}
		if(unit!=null){
			String unittype = unitTypeService.getUnittypeByid(unit.getUnittype_id());
			result.setUnittype(unittype);
		}
		if(vehicle!=null){
			String model = modelService.getModelByid(vehicle.getModel());
			result.setModel(model);
		}
		result.setCustomer(customer);
		result.setVehicle(vehicle);
		result.setUnit(unit);
		result.setCollection(collection);
		for(FeeInfobk feeInfo:list){
			if(feeInfo.getFeetype_id()==1){
				result.setServiceInfo(feeInfo);
			}else if(feeInfo.getFeetype_id()==2){
				result.setSimfeeInfo(feeInfo);
			}else if(feeInfo.getFeetype_id()==3){
				result.setInsuranceInfo(feeInfo);
			}else if(feeInfo.getFeetype_id()==4){
				result.setWebgisInfo(feeInfo);
			}
		}
		return result;
	}

}

