<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns="http://www.springframework.org/schema/beans"
    xmlns:context="http://www.springframework.org/schema/context" xmlns:tx="http://www.springframework.org/schema/tx"
    xmlns:aop="http://www.springframework.org/schema/aop" xmlns:p="http://www.springframework.org/schema/p"
    xsi:schemaLocation="
    http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
    http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd
	http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx.xsd
    http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop.xsd">

	<!-- 引入配置文件  -->
	<context:property-placeholder location="classpath:jdbc.properties" ignore-unresolvable="true" />
	<context:property-placeholder location="classpath:hibernate.properties" ignore-unresolvable="true" />
	
	<context:component-scan base-package="bhz.sys">
        <context:exclude-filter type="annotation" expression="org.springframework.stereotype.Controller"/>
    </context:component-scan>
	
	<!-- 自动代理的参数加入代理cglib的 ,则装载bean时，可以用实现类，不一定要用接口类-->
	<aop:aspectj-autoproxy proxy-target-class="true"/>
	
	<!-- mysql数据源 -->
	<bean id="mysql1DataSource" class="com.alibaba.druid.pool.DruidDataSource"   
          init-method="init" destroy-method="close">   
          
          <property name="driverClassName" value="${jdbc.driverClassName}"/>
          <property name="url" value="${jdbc.url}"/>
          <property name="username" value="${jdbc.username}"/>
          <property name="password" value="${jdbc.password}"/>
        
          <!-- 配置初始化大小、最小、最大 -->   
          <property name="initialSize" value="${jdbc.initialSize}"/>   
          <property name="minIdle" value="${jdbc.minIdle}" />   
          <property name="maxActive" value="${jdbc.maxActive}"/>  
          
          <!-- 配置获取连接等待超时的时间 -->   
          <property name="maxWait" value="${jdbc.maxWait}"/>  
          
          <!-- 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒 -->   
          <property name="timeBetweenEvictionRunsMillis" value="${jdbc.timeBetweenEvictionRunsMillis}"/>  
          
          <!-- 配置一个连接在池中最小生存的时间，单位是毫秒 -->   
          <property name="minEvictableIdleTimeMillis" value="${jdbc.minEvictableIdleTimeMillis}"/>  
          
          <property name="testWhileIdle" value="${jdbc.testWhileIdle}"/>  
          
          <!-- 这里建议配置为TRUE，防止取到的连接不可用 -->   
          <property name="testOnBorrow" value="${jdbc.testOnBorrow}"/>   
          <property name="testOnReturn" value="${jdbc.testOnReturn}"/>  
          <property name="poolPreparedStatements" value="${jdbc.poolPreparedStatements}"/>   
          <property name="validationQuery" value="${jdbc.validationQuery}"/>   
          <property name="filters" value="stat"/> <!-- 监控统计用的filter:stat 日志用的filter:log4j 防御sql注入的filter:wall -->  
          <property name="proxyFilters">   
           <list>   
            <ref bean="logFilter" />   
           </list>   
          </property>   
    </bean> 
    <bean id="logFilter" class="com.alibaba.druid.filter.logging.Slf4jLogFilter">   
         <property name="statementExecutableSqlLogEnable" value="false" />   
    </bean> 

	<!-- 配置sqlSessionFactory工厂 -->
	<bean id="mysql1SessionFactory"
		class="org.springframework.orm.hibernate4.LocalSessionFactoryBean">
		<property name="dataSource" ref="mysql1DataSource" />
		<property name="packagesToScan" value="com.hm.bigdata" />
		<property name="hibernateProperties">
			<props>
				<prop key="hibernate.dialect">${hibernate.mysql1Dialect}</prop>
				<prop key="hibernate.show_sql">${hibernate.show_sql}</prop>
				<prop key="hibernate.format_sql">true</prop>
				<prop key="hibernate.query.substitutions">${hibernate.query.substitutions}</prop>
				<prop key="hibernate.default_batch_fetch_size">${hibernate.default_batch_fetch_size}</prop>
				<prop key="hibernate.jdbc.batch_size">${hibernate.jdbc.batch_size}</prop>
				<prop key="hibernate.jdbc.fetch_size">${hibernate.jdbc.fetch_size}</prop>
				<prop key="hibernate.max_fetch_depth">${hibernate.max_fetch_depth}</prop>
				<prop key="hibernate.generate_statistics">${hibernate.generate_statistics}</prop>
				<prop key="hibernate.bytecode.use_reflection_optimizer">${hibernate.bytecode.use_reflection_optimizer}</prop>
<!-- 				<prop key="hibernate.connection.release_mode">${hibernate.connection.release_mode}</prop>
 -->				<prop key="hibernate.cache.use_second_level_cache">${hibernate.cache.use_second_level_cache}</prop>
				<prop key="hibernate.cache.use_query_cache">${hibernate.cache.use_query_cache}</prop>
				<prop key="hibernate.cache.region.factory_class">${hibernate.cache.region.factory_class}</prop>
				<prop key="net.sf.ehcache.configurationResourceName">${net.sf.ehcache.configurationResourceName}</prop>
				<prop key="hibernate.cache.use_structured_entries">${hibernate.cache.use_structured_entries}</prop>
			</props>
		</property>
	</bean>

<!-- ================================= 事务控制相关 ============================================= -->
	<!-- 开启AOP监听 只对当前配置文件有效 -->
	<aop:aspectj-autoproxy expose-proxy="true" />

	<!-- 开启注解事务 只对当前配置文件有效 -->
	<tx:annotation-driven transaction-manager="mysql1TxManager" />

	<bean id="mysql1TxManager"
		class="org.springframework.orm.hibernate4.HibernateTransactionManager">
		<property name="sessionFactory" ref="mysql1SessionFactory" />
	</bean>

	<tx:advice id="mysql1TxAdvice" transaction-manager="mysql1TxManager">
		<tx:attributes>
			<tx:method name="save*" propagation="REQUIRED" />
			<tx:method name="add*" propagation="REQUIRED" />
			<tx:method name="create*" propagation="REQUIRED" />
			<tx:method name="insert*" propagation="REQUIRED" />
			<tx:method name="update*" propagation="REQUIRED" />
			<tx:method name="merge*" propagation="REQUIRED" />
			<tx:method name="del*" propagation="REQUIRED" />
			<tx:method name="remove*" propagation="REQUIRED" />
			<tx:method name="put*" propagation="REQUIRED" />
			<tx:method name="use*" propagation="REQUIRED" />
			<!--hibernate4必须配置为开启事务 否则 getCurrentSession()获取不到 -->
			<tx:method name="get*" propagation="REQUIRED" read-only="true" />
			<tx:method name="count*" propagation="REQUIRED" read-only="true" />
			<tx:method name="find*" propagation="REQUIRED" read-only="true" />
			<tx:method name="list*" propagation="REQUIRED" read-only="true" />
			<tx:method name="*" read-only="true" />
		</tx:attributes>
	</tx:advice>
	<aop:config expose-proxy="true">
		<!-- 只对业务逻辑层实施事务 -->
		<aop:pointcut id="mysql1TxPointcut"
			expression="execution(* bhz.sys.service..*.*(..))" />
		<aop:advisor advice-ref="mysql1TxAdvice" pointcut-ref="mysql1TxPointcut" />
	</aop:config>

	<!-- AOP 日志 -->	
	
	<!-- 配置dubbo服务 -->
	<import resource="classpath:dubbo-provider.xml" />
	
	
</beans>