<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:context="http://www.springframework.org/schema/context"
	xmlns:aop="http://www.springframework.org/schema/aop" xmlns:tx="http://www.springframework.org/schema/tx"
	xsi:schemaLocation="http://www.springframework.org/schema/beans   
           http://www.springframework.org/schema/beans/spring-beans-3.0.xsd   
           http://www.springframework.org/schema/context 
           http://www.springframework.org/schema/context/spring-context-3.0.xsd   
           http://www.springframework.org/schema/aop 
           http://www.springframework.org/schema/aop/spring-aop-3.0.xsd   
           http://www.springframework.org/schema/tx 
           http://www.springframework.org/schema/tx/spring-tx-3.0.xsd"
	>

	<context:component-scan base-package="com.gboss">
        <context:exclude-filter type="annotation" expression="org.springframework.stereotype.Controller"/>
    </context:component-scan>
	<context:property-placeholder location="classpath:jdbc.properties" ignore-unresolvable="true" />
	<context:property-placeholder location="classpath:hibernate.properties" ignore-unresolvable="true" />
	<context:property-placeholder location="classpath:system.properties" ignore-unresolvable="true" />
	<bean id="springContext" class="com.gboss.util.SpringContext"></bean>
	<!-- <bean id="HibernateUtil" class="com.gboss.util.HibernateUtil"></bean> -->

	<!-- 自动代理的参数加入代理cglib的 ,则装载bean时，可以用实现类，不一定要用接口类-->
	<aop:aspectj-autoproxy proxy-target-class="true"/>

	<bean id="dataSource" class="org.logicalcobwebs.proxool.ProxoolDataSource">
		<property name="driver" value="${jdbc.driverClassName}" />
		<property name="driverUrl" value="${jdbc.url}" />
		<property name="user" value="${jdbc.username}"/>
		<property name="password" value="${jdbc.password}" />
		<property name="alias" value="${jdbc.alias}" />
		<property name="testBeforeUse">
			<value>false</value>
		</property>
    	<property name="houseKeepingSleepTime" value="${jdbc.houseKeepingSleepTime}" />
		<property name="maximumConnectionCount" value="${jdbc.maximum.connection.count}" />
		<property name="minimumConnectionCount" value="${jdbc.minimum.connection.count}" />
		<property name="statistics" value="${jdbc.statistics}" />
		<property name="simultaneousBuildThrottle" value="${jdbc.simultaneous.build.throttle}" />
		<property name="houseKeepingTestSql"  value="${jdbc.houseKeepingTestSql}"  />
		<property name="prototypeCount"  value="${jdbc.prototypeCount}"  />
		<property name="trace"  value="${jdbc.trace}"  />
		<property name="verbose"  value="${jdbc.verbose}"  />
		<property name="maximumActiveTime" value="${jdbc.maximumActiveTime}" />
		<property name="delegateProperties">
			<value>user=${jdbc.username},password=${jdbc.password}</value>
		</property>
	</bean>
	
	<bean id="jdbcTemplate" class="org.springframework.jdbc.core.JdbcTemplate"> 
		<property name="dataSource" ref="dataSource" /> 
	</bean>
	
	<bean id="namedJdbcTemplate" class="org.springframework.jdbc.core.namedparam.NamedParameterJdbcTemplate">
      <constructor-arg ref="dataSource"/>
   	</bean>
	
	<bean id="TransactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager" > 
         <property name="dataSource"> 
             <ref bean="dataSource"/> 
         </property> 
	</bean>
	<!-- 
	<bean id="sessionFactory"
		class="org.springframework.orm.hibernate4.LocalSessionFactoryBean">
		<property name="dataSource" ref="dataSource" />
		<property name="packagesToScan" value="com.gboss" />
		<property name="hibernateProperties">
			<props>
				<prop key="hibernate.dialect">${hibernate.dialect}</prop>
				<prop key="hibernate.show_sql">${hibernate.show_sql}</prop>
				<prop key="hibernate.format_sql">true</prop>
				<prop key="hibernate.query.substitutions">${hibernate.query.substitutions}</prop>
				<prop key="hibernate.default_batch_fetch_size">${hibernate.default_batch_fetch_size}</prop>
				<prop key="hibernate.max_fetch_depth">${hibernate.max_fetch_depth}</prop>
				<prop key="hibernate.generate_statistics">${hibernate.generate_statistics}</prop>
				<prop key="hibernate.bytecode.use_reflection_optimizer">${hibernate.bytecode.use_reflection_optimizer}</prop>
				<prop key="hibernate.cache.use_second_level_cache">${hibernate.cache.use_second_level_cache}</prop>
				<prop key="hibernate.cache.use_query_cache">${hibernate.cache.use_query_cache}</prop>
				<prop key="hibernate.cache.region.factory_class">${hibernate.cache.region.factory_class}</prop>
				<prop key="net.sf.ehcache.configurationResourceName">${net.sf.ehcache.configurationResourceName}</prop>
				<prop key="hibernate.cache.use_structured_entries">${hibernate.cache.use_structured_entries}</prop>
			</props>
		</property>
	</bean>
	 -->
</beans>  