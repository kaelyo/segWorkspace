package cc.chinagps.seat.controller;

import java.math.BigDecimal;
import java.text.SimpleDateFormat;
import java.util.Collection;
import java.util.Collections;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Locale;
import java.util.Map;

import javax.servlet.http.HttpServletRequest;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.multipart.commons.CommonsMultipartFile;

import cc.chinagps.seat.bean.ReportCommonQuery;
import cc.chinagps.seat.bean.ReportCommonResponse;
import cc.chinagps.seat.bean.table.ProductLibTable;
import cc.chinagps.seat.bean.table.SeatSegGroupTable;
import cc.chinagps.seat.bean.table.SeatSegPhonebookTable;
import cc.chinagps.seat.bean.table.UnitTypeTable;
import cc.chinagps.seat.service.KnowledgeLibService;
import cc.chinagps.seat.service.UnitTypeTableService;
import cc.chinagps.seat.util.HttpClientUtil;

import com.googlecode.jsonplugin.JSONException;
import com.googlecode.jsonplugin.JSONUtil;

@Controller
@RequestMapping("/nl")
public class KnowledgeLibController extends BasicController {
	
	@Autowired
	private KnowledgeLibService nlService;
	
	@Autowired
	private UnitTypeTableService unitTypeService;
	
	@RequestMapping("/telsearch/add")
	@ResponseBody
	public String saveorupdate(HttpServletRequest request,Locale locale) throws JSONException {
		Map<String, Object> resultMap = new HashMap<String, Object>();
		SeatSegPhonebookTable sspt = HttpClientUtil.request2Bean(request, SeatSegPhonebookTable.class);
		sspt.setStamp(new Date());
		String groupid = request.getParameter("groupId");
		if(groupid!=null){
			nlService.save(sspt,groupid);
			resultMap.put("success", true);
			resultMap.put("id", sspt.getPhonebookId());
		}else{
			resultMap.put("success", false);
			resultMap.put("message", "操作失败");
		}
		return JSONUtil.serialize(resultMap);
	}
	
	@RequestMapping("/telsearch/del")
	@ResponseBody
	public String del(@RequestParam Long[] phonebook_ids, HttpServletRequest request) throws JSONException {
		Map<String, Object> resultMap = new HashMap<String, Object>();
		if(phonebook_ids!=null  && phonebook_ids.length > 0){
			nlService.del(phonebook_ids);
			resultMap.put("success", true);
		}else{
			resultMap.put("success", false);
			resultMap.put("message", "操作失败");
		}
		return JSONUtil.serialize(resultMap);
	}
	
	@RequestMapping("/telsearch/group")
	@ResponseBody
	public String getTelSearchGroups() throws JSONException {
		Map<String, Object> resultMap = new HashMap<String, Object>();
		
		List<SeatSegGroupTable> groups = nlService.getTelSearchGroups();
		resultMap.put("success", true);
		resultMap.put("data", groups);
		
		return JSONUtil.serialize(resultMap);
	}
	
	@RequestMapping("/telsearch/phonebook")
	@ResponseBody
	public String getTelSearchPhoneBooks(int groupId) throws JSONException {
		Map<String, Object> resultMap = new HashMap<String, Object>();
		
		Collection<SeatSegPhonebookTable> phonebooks = nlService.getTelSearchPhoneBooks(groupId);
		resultMap.put("success", true);
		resultMap.put("data", phonebooks);
		
		return JSONUtil.serialize(resultMap);
	}
	
	@RequestMapping("/telsearch/search")
	@ResponseBody
	public String searchPhoneBooksInTelSearch(@RequestParam String param) throws JSONException {
		Map<String, Object> resultMap = new HashMap<String, Object>();
		
		Collection<SeatSegPhonebookTable> phonebooks = 
				nlService.searchPhoneBooksInTelSearch(param);
		resultMap.put("success", true);
		resultMap.put("data", phonebooks);
		
		return JSONUtil.serialize(resultMap);
	}

	@RequestMapping("/productlib")
	@ResponseBody
	public String getProductLib(@RequestParam(required=false,value="draw") String draw,
			@RequestParam(required = false, value="search[value]") String param, 
			ReportCommonQuery query) throws JSONException {
		Map<String, Object> resultMap = new HashMap<String, Object>();
		ReportCommonResponse response = nlService.getProductLibCommonResp(param, query);
		List<ProductLibTable> productLibs = Collections.emptyList();
		if (response.getRecordsTotal() > 0) {
			productLibs = nlService.getProductLibs(param, query);
		}
		resultMap.put("success", true);
		resultMap.put("draw", draw);
		resultMap.put("data", productLibs);
		resultMap.putAll(response.getCommonRespMap());
		
		return JSONUtil.serialize(resultMap);
	}
	
	/**
	 * 编辑和保存产品信息（带附件）
	 * @param files
	 * @param request 
	 * @return
	 * @throws JSONException
	 */
	@RequestMapping("/edit_product")
	@ResponseBody
	public String editProduct(
			@RequestParam(required=false,value="upload_file1") CommonsMultipartFile upload_file1,//保存
			@RequestParam(required=false,value="upload_file2") CommonsMultipartFile upload_file2,//修改
			HttpServletRequest request) {
		String result = null;
		Map<String, Object> resultMap = new HashMap<String, Object>();
		ProductLibTable plt = HttpClientUtil.request2Bean(request,ProductLibTable.class);
		String fileName = null;
		try {
			if(upload_file1!=null){
				fileName  = new SimpleDateFormat("yyyyMMddHHmmss").format(new Date()) + "_" + upload_file1.getOriginalFilename();
				String file_path = request.getSession().getServletContext().getRealPath("/upload/")+"/product_memos/" + fileName ;
				upLoadFile(upload_file1, request, file_path);
			}
			if(upload_file2!=null){
				fileName  = new SimpleDateFormat("yyyyMMddHHmmss").format(new Date()) + "_" + upload_file2.getOriginalFilename();
				String file_path = request.getSession().getServletContext().getRealPath("/upload/")+"/product_memos/" + fileName ;
				upLoadFile(upload_file2, request, file_path);
			}
			plt.setUrl(fileName);
			
			//修改
			if(plt.getProductId() != 0){
				ProductLibTable db_plt = nlService.findProduct(plt.getProductId());
				db_plt.setCname(plt.getCname());
				db_plt.setMemo(plt.getMemo());
				db_plt.setUrl(fileName);
				nlService.addProduct(db_plt);
				resultMap.put("success", true);
				resultMap.put("product_id", db_plt.getProductId());
			}else{//保存
				UnitTypeTable unitTypeTable = new UnitTypeTable();
				String unittype_id =  request.getParameter("unittype_id");
				if(unittype_id!= null && !"".equals(unittype_id)){
					BigDecimal typeId = new BigDecimal(unittype_id);
					unitTypeTable.setTypeId(typeId );
					plt.setUnitTypeTable(unitTypeTable );
					nlService.addProduct(plt);
					resultMap.put("success", true);
					resultMap.put("product_id", plt.getProductId());
				}else{
					resultMap.put("success", false);
					resultMap.put("message", "操作失败！");
				}
			}
			result =  JSONUtil.serialize(resultMap);
			
		} catch (JSONException e) {
			resultMap.put("success", false);
			resultMap.put("message", "操作失败！");
			try {
				result =  JSONUtil.serialize(resultMap);
			} catch (JSONException e1) {
				e1.printStackTrace();
			}
		}
		return result;
	}
	
	@RequestMapping("/upload")
	@ResponseBody
	public String upload(@RequestParam(required=false,value="upload_file") CommonsMultipartFile upload_file,
			@RequestParam(required=false,value="product_id") Integer product_id,
			HttpServletRequest request) throws JSONException {
		Map<String, Object> resultMap = new HashMap<String, Object>();
		
		String file_path = request.getSession().getServletContext().getRealPath("/upload/")+"/product_memos/"+ new SimpleDateFormat("yyyyMMddHHmmss").format(new Date()) + "_" + upload_file.getOriginalFilename();
		upLoadFile(upload_file, request, file_path);
//		ProductLibTable plt = nlService.findProduct(product_id);
//		plt.setUrl(file_path);
		resultMap.put("success", true);
		return JSONUtil.serialize(resultMap);
	}

	@RequestMapping("/unit_types")
	@ResponseBody
	public String unitTypes(HttpServletRequest request) throws JSONException {
		Map<String, Object> resultMap = new HashMap<String, Object>();
		resultMap.put("data", unitTypeService.unitTypesList(null));
		resultMap.put("success", true);
		return JSONUtil.serialize(resultMap);
	}
	
	@RequestMapping("/del_products")
	@ResponseBody
	public String delProducts(@RequestParam(value="pids") Integer[] pids,HttpServletRequest request) throws JSONException {
		Map<String, Object> resultMap = new HashMap<String, Object>();
		nlService.delProducts(pids);
		resultMap.put("success", true);
		return JSONUtil.serialize(resultMap);
	}
	
}
